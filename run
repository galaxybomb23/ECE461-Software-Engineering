#!/bin/bash

# change this to run from any directory
LOGFILE=logs/run.log
original_dir=$(pwd)
cd "$(dirname "$0")"
mkdir -p logs
echo "Running from $(pwd)" > $LOGFILE



# Function to install and use the latest version of Node.js
install_latest_node() {
  echo "Installing the latest version of Node.js..." >> $LOGFILE
  # Detect the platform (Linux/Mac/Windows)
  unameOut="$(uname -s)"
  case "${unameOut}" in
      Linux*)     machine=Linux;;
      Darwin*)    machine=Mac;;
      CYGWIN*|MINGW*|MSYS*|MINGW32*) machine=Windows;;
      *)          machine="UNKNOWN:${unameOut}"
  esac

  # Install nvm if not already installed
  if [ ! -d "$HOME/.nvm" ]; then
    if [ "$machine" = "Linux" ] || [ "$machine" = "Mac" ]; then
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
    elif [ "$machine" = "Windows" ]; then
      echo "Please install nvm manually from https://github.com/coreybutler/nvm-windows/releases" >> $LOGFILE
      exit 1
    else
      echo "Unsupported platform: ${machine}" >> $LOGFILE
      exit 1
    fi
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
  else
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
  fi

  # Install and use the latest version of Node.js
  if [ "$machine" = "Windows" ]; then
    nvm install latest
    nvm use latest
  else
    nvm install node --reinstall-packages-from=node
    nvm use node
  fi
}

build() {
  echo "Building the project..." >> logs/run.log
  npx tsc
  chmod +x dist/cli.js 
}


# Main script execution

case $1 in
  build)
    build 
    ;;
  install)
    # Run the install_latest_node function to ensure Node.js is up-to-date
    install_latest_node
    npm install
    build
    ;;
  clean)
    echo "Cleaning the project..." >> logs/run.log
    rm -rf build
    rm -rf dist
    ;;
  *)
    # build # Uncomment this line if you want to build the project before running the script
    echo "Running the script with '$@'..." >> logs/run.log
    ./dist/cli.js "$@" 
    exitCode=$?
    echo "Script exited with code $exitCode" >> logs/run.log
    ;;
esac

# change back to the original directory
cd "$original_dir"

exit $exitCode